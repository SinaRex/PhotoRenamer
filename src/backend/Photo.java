package backend;

import java.io.File;
import java.io.Serializable;
import java.util.*;
import java.sql.Timestamp;

/**
 * The photo representing the file photo on the OS.
 */
public class Photo implements Serializable{

   /**
    * Generated by Eclipse.
    */
	private static final long serialVersionUID = -7014686214152101795L;
	
	/**
	 * The name of this photo file with no tags
	 */
	private String originalName;
	
	/**
	 * The tagged name of this photo file with list of tags attached to the original name
	 */
	private String taggedName;
	
	/**
	 * The extension of this file <code>Photo</code>.
	 */
	private String extension;
	
	/**
	 * The <code>File</code> type of the photo to use the paths and other attributes.
	 */
    private File filePhoto;

    /**
     * A list of this <code>Photo</code> tags.
     */
    private ArrayList<Tag> tags = new ArrayList<>();
    
    /**
     * The <code>Map</code> from <code>Date</code>/time-stamp to a list of tags.
     */
    private Map<Date, ArrayList<Tag>> dateTotags = new HashMap<>();

    /**
     * The <code>Map</code> from <code>Date</code>/time-stamp  to the <code>Tag</code> name used on that specific time-stamp.
     */
    private Map<Date, String> dateToNames = new HashMap<>();


    /**
     * A photo in this Directory.
     * 
     * @param filePhoto the File type of this Photo
     * @param name the original name of this Photo
     * @param ext the extension file of this Photo
     * @see PhotoManager#buildTree(File, FileNode)
     */
    public Photo(File filePhoto, String name, String ext){
        this.filePhoto = filePhoto;
        this.originalName = name;
        this.extension = ext;
        this.taggedName = this.originalName;

        Date date = new Date();
        Timestamp timestamp = new Timestamp(date.getTime());
        this.dateToNames.put(timestamp, this.taggedName);
        this.dateTotags.put(timestamp, new ArrayList<>());
    }
    
    /**
     * Add a new tag to this photo's list of tags with the given tag's label label.
     * 
     * @param label the label's name
     * */
    public void add(String label){

    	Tag t = new Tag(label);
    	if(this.tags.size() == 0){
    		this.tags.add(t);

            // we need to save the old name of this photo before renaming it, so
            // that we can record it and pass it to the log system.
    		String oldName = this.taggedName;
    		this.rename();
    		PhotoManager.logger.addToLog("(Added Tag) Old Name: " + oldName + ", New Name: " + this.taggedName);

    	}else{
    		ArrayList<String> strings = new ArrayList<>();
    		for(Tag tag: this.tags){
    			strings.add(tag.label);
    		}

    		// making sure there are no duplicated labels in this lists of photos.
    		if (!strings.contains(label)){
				this.tags.add(t);
				String oldName = this.taggedName;
				this.rename();
				PhotoManager.logger.addToLog("(Added Tag) Old Name: " + oldName + ", New Name: " + this.taggedName);
    		}
    	}
    }

    /**
     * Remove a tag from ArrayList with given string label.
     * 
     * @param label the tag's name
     *
     * */
    public void remove(String label){

    	ArrayList<Tag> tagsCopy = new ArrayList<>();
		tagsCopy.addAll(this.tags);
		for(Tag t : tagsCopy){
			if (t.label.equals(label)){
				this.tags.remove(t);
				String oldName = this.taggedName;
				this.rename();
				PhotoManager.logger.addToLog("(Removed Tag) Old Name: " + oldName + ", New Name: " + this.taggedName);
			}
		}
    }
    
    /**
     * Rename this <code>Photo's</code> name to the new tagged name.
     *
     * */
    public void rename(){

    	this.taggedName = this.originalName;
    	for(Tag t: this.tags){
    		this.taggedName += String.format(" @%s", t.label);	
    	}
    	try{      
    		File f = this.filePhoto;
    		File new_f = new File(this.filePhoto.getParent() + "/" + this.taggedName + "." + this.extension);
    		f.renameTo(new_f);
    		this.filePhoto = new_f;
    		Date d = new Date();
    		ArrayList<Tag> tagsCopy = new ArrayList<>();
    		tagsCopy.addAll(this.tags);
            Timestamp myTimeStamp = new Timestamp(d.getTime());

            // add a new timestamp to the maps because a new name of a photo is created.
    		this.dateTotags.put(myTimeStamp, tagsCopy);
			this.dateToNames.put(myTimeStamp, taggedName);


    	}catch(Exception e){
    		e.printStackTrace();                                        /*if any error occurs*/

    	}
    }
    
    /**
     * Revert the name of this photo to the given <code>Date</code>  oldDate.
     * 
     * @param oldDate the old date revert the name to.
     */
    public void revertToDate(Date oldDate){

    	this.tags = this.dateTotags.get(oldDate);
        ArrayList<Date> copyOfKeySet = new ArrayList<>();
        copyOfKeySet.addAll(this.dateTotags.keySet());
    	for(Date d : copyOfKeySet){
    		if(d.compareTo(oldDate) >= 0){
                this.dateTotags.remove(d);
                this.dateToNames.remove(d);
    		}
    	}

    	// Update the logger.
    	String oldName = this.taggedName;
		this.rename();
		PhotoManager.logger.addToLog("(oldDate Tag) Old Name: " + oldName + ", New Name: " + this.taggedName);

    }
    
    
    /**
     * Return a sorted list of dates or time-stamps which was used in the map of date to list of tags.
     *
     * @return a sorted list of dates.
     */
    public ArrayList<Date> getDatesSorted(){
    	ArrayList<Date> list = new ArrayList<>();
        Map<Date, String> treeMap = new TreeMap<>(this.dateToNames);
        list.addAll(treeMap.keySet());
        return list;
    }

	@Override
    public String toString(){
    	return String.format("Name: %s, Tags: %s", this.taggedName, this.tags);
    }

	/**
	 * @return the originalName
	 */
	public String getOriginalName() {
		return originalName;
	}

	/**
	 * @return the taggedName
	 */
	public String getTaggedName() {
		return taggedName;
	}

	/**
	 * @return the extension
	 */
	public String getExtension() {
		return extension;
	}

	/**
	 * @return the filePhoto
	 */
	public File getFilePhoto() {
		return filePhoto;
	}

	/**
	 * @return the tags
	 */
	public ArrayList<Tag> getTags() {
		return tags;
	}

	/**
	 * @return the dateTotags
	 */
	public Map<Date, ArrayList<Tag>> getDateTotags() {
		return dateTotags;
	}

	/**
	 * @return the dateToNames
	 */
	public Map<Date, String> getDateToNames() {
		return dateToNames;
	}

	/**
	 * @param originalName the originalName to set
	 */
	public void setOriginalName(String originalName) {
		this.originalName = originalName;
	}

	/**
	 * @param taggedName the taggedName to set
	 */
	public void setTaggedName(String taggedName) {
		this.taggedName = taggedName;
	}

	/**
	 * @param extension the extension to set
	 */
	public void setExtension(String extension) {
		this.extension = extension;
	}

	/**
	 * @param filePhoto the filePhoto to set
	 */
	public void setFilePhoto(File filePhoto) {
		this.filePhoto = filePhoto;
	}

	/**
	 * @param tags the tags to set
	 */
	public void setTags(ArrayList<Tag> tags) {
		this.tags = tags;
	}

	/**
	 * @param dateTotags the dateTotags to set
	 */
	public void setDateTotags(Map<Date, ArrayList<Tag>> dateTotags) {
		this.dateTotags = dateTotags;
	}

	/**
	 * @param dateToNames the dateToNames to set
	 */
	public void setDateToNames(Map<Date, String> dateToNames) {
		this.dateToNames = dateToNames;
	}

    
}
